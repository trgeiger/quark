name: build-quark
on:
  schedule:
    - cron: '30 21 * * *'  # 9:30pm everyday
  pull_request:
    branches:
      - main
      - testing
    paths-ignore:
      - '**.md'
  push:
    branches:
      - main
      - testing
    paths-ignore:
      - '**.md'
env:
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  push-ghcr:
    name: Create image
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_flavor: [silverblue, kinoite]
        base_name: [quark, quark-cloud-dev]
        fedora_version: [41]
        include:
          - major_version: 41
            is_latest_version: true
            is_stable_version: true
    steps: 
      - name: Checkout
        uses: actions/checkout@v4

      - name: Matrix Variables
        run: |
          if [[ "${{ matrix.image_flavor }}" == "kinoite" ]]; then
            echo "IMAGE_NAME=quark-plasma" >> $GITHUB_ENV
          else 
            echo "IMAGE_NAME=${{ matrix.base_name }}" >> $GITHUB_ENV
          fi

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          FEDORA_VERSION="${{ matrix.fedora_version }}"
          COMMIT_TAGS=()
          BUILD_TAGS=()
          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.pull_request.number }}-${FEDORA_VERSION}")
          COMMIT_TAGS+=("${SHA_SHORT}-${FEDORA_VERSION}")
          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              COMMIT_TAGS+=("pr-${{ github.event.pull_request.number }}")
              COMMIT_TAGS+=("${SHA_SHORT}")
          fi

          if [[ ${{ github.ref_name }} == "testing" ]]; then
             BUILD_TAGS=("${FEDORA_VERSION}-testing" "${FEDORA_VERSION}-testing-${TIMESTAMP}")
             if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
                [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
                 BUILD_TAGS+=("testing")
                 echo "DEFAULT_TAG=testing" >> $GITHUB_ENV
             fi
          else
             BUILD_TAGS=("${FEDORA_VERSION}" "${FEDORA_VERSION}-${TIMESTAMP}")
             BUILD_TAGS+=("${FEDORA_VERSION}-stable" "${FEDORA_VERSION}-stable-${TIMESTAMP}")
             if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
                [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
                 BUILD_TAGS+=("latest" "stable")
                 echo "DEFAULT_TAG=latest" >> $GITHUB_ENV
             fi
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi
          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done
          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      - name: Get Current Fedora Version
        id: labels
        run: |  
          ver=$(skopeo inspect docker://ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ matrix.fedora_version }} | jq -r '.Labels["org.opencontainers.image.version"]')
          echo "VERSION=$ver" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ steps.labels.outputs.VERSION }}
            org.opencontainers.image.description=Personal Silverblue image

      - name: Pull images
        uses: Wandalen/wretry.action@v3.5.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            podman pull quay.io/fedora-ostree-desktops/${{ matrix.image_flavor }}:${{ matrix.fedora_version }}

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2.13
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            IMAGE_VENDOR=${{ github.repository_owner }}
            FEDORA_MAJOR_VERSION=${{ matrix.fedora_version }}
            BASE_IMAGE_NAME=${{ matrix.image_flavor }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false
          extra-args: |
            --target=${{ matrix.base_name }}

      - name: Sign kernel
        uses: EyeCantCU/kernel-signer@v0.2.1
        with:
          image: ${{ steps.build_image.outputs.image }}
          default-tag: ${{ env.DEFAULT_TAG }}
          privkey: ${{ secrets.QUARK_PRIVKEY_18012024 }}
          pubkey: /etc/pki/akmods/certs/quark-secure-boot.der
          tags: ${{ steps.build_image.outputs.tags }}
          kernel_suffix: cachyos

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: Wandalen/wretry.action@v3.5.0
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          action: redhat-actions/push-to-registry@v2
          attempt_limit: 3
          attempt_delay: 15000
          with: |
            image: ${{ steps.build_image.outputs.image }}
            tags: ${{ steps.build_image.outputs.tags }}
            registry: ${{ steps.registry_case.outputs.lowercase }}
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}
            extra-args: |
              --disable-content-trust

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}  

      - uses: sigstore/cosign-installer@main
        if: github.event_name != 'pull_request'

      - name: Sign the container image
        if: github.event_name != 'pull_request'
        run: cosign sign -y ${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}@${DIGEST}
        env:
          DIGEST: ${{ fromJSON(steps.push.outputs.outputs).digest }}

      - name: Verify the pushed tags
        if: github.event_name != 'pull_request' && github.ref_name != 'testing'
        run: |
            cosign verify ${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }} \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "${{ github.server_url }}/${{ github.repository }}"

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs.outputs) }}"
